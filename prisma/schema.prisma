// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id  Int @id @default(autoincrement())
  role Role @default(USER)
  nickName String @db.VarChar(20) @unique
  email String @db.VarChar(20) @unique
  password String
  createAt DateTime @default(now())
  grade Grade @default(NOMAL)
  Like Like[]
  Participate Participate[]
  Application Application[]
  Feedback Feedback[]
  Work Work[]
}

enum Role {
  USER
  ADMIN
}

enum Grade {
  NOMAL
  EXPERT
}

model Challenge {
  id Int @id @default(autoincrement())
  title String @db.VarChar(200)
  link String
  field Field
  docType DocType
  deadLine DateTime @default(now())
  progress Boolean @default(false)
  participants Int @default(1)
  maxParticipants Int
  content String
  Participate Participate[]
  Application Application?
  Work Work[]
} 

enum Field {
  NEXT
  JS
  API
  WEB
  CAREER
}

enum DocType {
  DOCUMENT
  BLOG
}

model Like {
  id Int @id @default(autoincrement())
  userId Int 
  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
  workId Int 
  Work Work @relation(fields: [workId], references: [id], onDelete: Cascade)
}

model Participate {
  id Int @id @default(autoincrement())
  userId Int 
  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
  challengeId Int 
  Challenge Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
}

model Application {
  id Int @id @default(autoincrement())
  userId Int
  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
  challengeId Int @unique
  Challenge Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  status Status @default(WAITING)
  appliedAt DateTime ?
  refuseReasons String?
  refuseAt DateTime?
}

enum Status {
  REFUSE
  APPLY
  WAITING
}

model Feedback {
  id Int @id @default(autoincrement())
  userId Int 
  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
  workId Int 
  Work Work @relation(fields: [workId], references: [id], onDelete: Cascade)
  content String
  createdAt DateTime @default(now())
}

model Work {
  id Int @id @default(autoincrement())
  userId Int 
  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
  challengeId Int 
  Challenge Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  Like Like[]
  description String
  lastModifiedAt DateTime @updatedAt
  status Boolean
  submissionTime DateTime @default(now())
  Feedback Feedback[]
}